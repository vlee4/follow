{"version":3,"sources":["Components/Navbar.js","Components/Home.js","Components/SingleExpense.js","Components/Accounts.js","Components/Categories.js","Components/View.js","Components/ExpenseTracker.js","Components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","Home","SingleExpense","props","DATE","Date","date","toLocaleDateString","year","month","day","AMOUNT","Intl","NumberFormat","style","currency","minimumFractionDigits","format","amount","id","account","category","Accounts","Categories","View","mockData","Account","Category","Amount","this","tab","Object","keys","map","key","idx","entry","React","Component","ExpenseTracker","state","handleClick","bind","e","setState","target","value","onClick","Routes","exact","path","component","Tracker","App","Navbar","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb36ceb0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NavBar() {\n  return (\n    <div className=\"navbar\">\n      <Link className=\"title\" to=\"/follow/\">\n        <h1 className=\"title\">Follow Your Money</h1>\n      </Link>\n      <div className=\"navLinks\">\n        <Link to=\"/follow/\"> Home </Link>\n        <Link to=\"/follow/tracker\"> Expense Tracker </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Welcome Home</h2>\n      <div>This is the homepage to be!</div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction SingleExpense(props) {\n  //formatting dates\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"2-digit\",\n  };\n  let DATE = new Date(props.date).toLocaleDateString(\"en-US\", options);\n  // var d = new Date(\"10 12 14\").toLocaleDateString(\"en-US\",options);\n\n  //formatting currency\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n  });\n\n  let AMOUNT = currencyFormatter.format(props.amount);\n  return (\n    <tr>\n      <td>{props.id || \"ID\"}</td>\n      <td>{DATE || `January 3, 2020`}</td>\n      <td>{props.account || `Acct #1337108049384039 839doj odsf 82`}</td>\n      <td>{props.category || \"Entertainment\"}</td>\n      <td>{AMOUNT || \"$100\"}</td>\n    </tr>\n  );\n}\n\nexport default SingleExpense;\n","import React from \"react\";\n\nfunction Accounts() {\n  return (\n    <div>\n      <h3>ACCOUNTS</h3>\n    </div>\n  );\n}\n\nexport default Accounts;\n","import React from \"react\";\n\nfunction Categories() {\n  return (\n    <div>\n      <h3>CATEGORIES</h3>\n    </div>\n  );\n}\n\nexport default Categories;\n","import React from \"react\";\nimport SingleExpense from \"./SingleExpense\";\nimport Accounts from \"./Accounts\";\nimport Categories from \"./Categories\";\n\nclass View extends React.Component {\n  render() {\n    const mockData = [\n      {\n        id: 1,\n        Date: \"10 13 95\",\n        Account: \"Acct #1337\",\n        Category: \"Entertainment\",\n        Amount: 100,\n      },\n      {\n        id: 2,\n        Date: \"9 12 95\",\n        Account: \"Acct #0613\",\n        Category: \"Art\",\n        Amount: 1030,\n      },\n      {\n        id: 3,\n        Date: \"12 31 95\",\n        Account: \"Acct #1337\",\n        Category: \"Drama\",\n        Amount: 10330,\n      },\n    ];\n    if (!this.props.tab) {\n      return <div>Please select how you would like to view your expenses</div>;\n    } else if (this.props.tab === \"Accounts\") {\n      return <Accounts />;\n    } else if (this.props.tab === \"Categories\") {\n      return <Categories />;\n    }\n\n    return (\n      <div className=\"expensesWindow\">\n        <h3>EXPENSES</h3>\n        <table>\n          <thead>\n            <tr>\n              {Object.keys(mockData[0]).map((key, idx) => {\n                return <td key={`${key}_${idx}`}>{key}</td>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {mockData.map((entry, idx) => {\n              let { id, Date, Account, Category, Amount } = entry;\n              return (\n                <SingleExpense\n                  key={`${id}_${idx}`}\n                  id={id}\n                  date={Date}\n                  account={Account}\n                  category={Category}\n                  amount={Amount}\n                />\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default View;\n","import React from \"react\";\nimport View from \"./View\";\n\nclass ExpenseTracker extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tab: \"\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(e) {\n    this.setState({ tab: e.target.value });\n  }\n  render() {\n    return (\n      <div className=\"tracker\">\n        <h2>EXPENSE TRACKER</h2>\n        <div>Choose what you want to view</div>\n        <div className=\"trackerView\">\n          <button value=\"Expenses\" onClick={this.handleClick}>\n            Expenses\n          </button>\n          <button value=\"Accounts\" onClick={this.handleClick}>\n            Accounts\n          </button>\n          <button value=\"Categories\" onClick={this.handleClick}>\n            Categories\n          </button>\n        </div>\n        <View tab={this.state.tab} />\n      </div>\n    );\n  }\n}\n\nexport default ExpenseTracker;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Tracker from \"./ExpenseTracker\";\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/follow/\" component={Home} />\n      <Route path=\"/follow/tracker\" component={Tracker} />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navbar from \"./Components/Navbar\";\nimport Routes from \"./Components/Routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Routes />\n      </Router>\n      <footer className=\"foot\">\n        <div>Created: September 2020</div>\n        <div>\n          Source Code: <a href=\"https://github.com/vlee4/follow/\">Github</a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}